// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'CartModel.dart';
import 'ItemsAfterModel.dart';
import 'ItemsBeforeModel.dart';
import 'MainModel.dart';
import 'UserDetails.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 8934226954639719295),
      name: 'UserDetails',
      lastPropertyId: const IdUid(3, 1763756433416958809),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3760739413008603685),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6278257118344132579),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1763756433416958809),
            name: 'userSurName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1871904971936861564),
      name: 'MainModel',
      lastPropertyId: const IdUid(5, 8240486570814364270),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3564023382393307182),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1027152526266843741),
            name: 'mainId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1167674474096799640),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 692027927296734842),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8240486570814364270),
            name: 'userEmail',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 2055804690677872893),
      name: 'CartModel',
      lastPropertyId: const IdUid(2, 455430079075373975),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1004961484487870132),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 455430079075373975),
            name: 'totalAmount',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1660106376219171230),
      name: 'ItemsAfterModel',
      lastPropertyId: const IdUid(9, 4583574707090954097),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4122860498808564185),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7086866035183813165),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7890412434020259917),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 439982060746491395),
            name: 'about',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 200413033542538505),
            name: 'originalPrice',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6492379541807653487),
            name: 'discountPrice',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3722905557574652561),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6775337843626376971),
            name: 'numberOfItem',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4583574707090954097),
            name: 'itemId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 4430301737933220992),
      name: 'ItemsBeforeModel',
      lastPropertyId: const IdUid(7, 2315530566371930826),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1279513125754322625),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 899360112296349810),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3310709371300604822),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2914758887186160474),
            name: 'about',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7564555924661142938),
            name: 'originalPrice',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7448806853975047533),
            name: 'discountPrice',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2315530566371930826),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 4430301737933220992),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7833031378694524776],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        160028209015363776,
        1271218187466433731,
        2473187316524608470,
        3446790940937575394,
        8447926286276635498,
        2467547004880024954,
        8864307103121573239,
        1827840735276142992,
        6245508310332174618,
        6966335473058315592,
        1584243350704345191,
        1248929269349115705,
        5528733285357668036,
        9169473667809256363,
        7579932584341114675,
        526469794285801441,
        2013573255988379969,
        1672650309812825151,
        7921363248446949344,
        5586215712732278274,
        3301637744098561018,
        7704821999428682702,
        6184907912302544478,
        7268066526059606047,
        2822712057214110171,
        1553330139128643398
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserDetails: EntityDefinition<UserDetails>(
        model: _entities[0],
        toOneRelations: (UserDetails object) => [],
        toManyRelations: (UserDetails object) => {},
        getId: (UserDetails object) => object.id,
        setId: (UserDetails object, int id) {
          object.id = id;
        },
        objectToFB: (UserDetails object, fb.Builder fbb) {
          final userNameOffset = fbb.writeString(object.userName);
          final userSurNameOffset = fbb.writeString(object.userSurName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userNameOffset);
          fbb.addOffset(2, userSurNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userSurNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = UserDetails(
              id: idParam,
              userName: userNameParam,
              userSurName: userSurNameParam);

          return object;
        }),
    MainModel: EntityDefinition<MainModel>(
        model: _entities[1],
        toOneRelations: (MainModel object) => [],
        toManyRelations: (MainModel object) => {},
        getId: (MainModel object) => object.id,
        setId: (MainModel object, int id) {
          object.id = id;
        },
        objectToFB: (MainModel object, fb.Builder fbb) {
          final mainIdOffset = fbb.writeString(object.mainId);
          final tokenOffset = fbb.writeString(object.token);
          final userNameOffset = fbb.writeString(object.userName);
          final userEmailOffset = fbb.writeString(object.userEmail);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mainIdOffset);
          fbb.addOffset(2, tokenOffset);
          fbb.addOffset(3, userNameOffset);
          fbb.addOffset(4, userEmailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final mainIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final tokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final userEmailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = MainModel(
              id: idParam,
              mainId: mainIdParam,
              token: tokenParam,
              userName: userNameParam,
              userEmail: userEmailParam);

          return object;
        }),
    CartModel: EntityDefinition<CartModel>(
        model: _entities[2],
        toOneRelations: (CartModel object) => [],
        toManyRelations: (CartModel object) => {},
        getId: (CartModel object) => object.id,
        setId: (CartModel object, int id) {
          object.id = id;
        },
        objectToFB: (CartModel object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.totalAmount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final totalAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = CartModel(id: idParam, totalAmount: totalAmountParam);

          return object;
        }),
    ItemsAfterModel: EntityDefinition<ItemsAfterModel>(
        model: _entities[3],
        toOneRelations: (ItemsAfterModel object) => [],
        toManyRelations: (ItemsAfterModel object) => {},
        getId: (ItemsAfterModel object) => object.id,
        setId: (ItemsAfterModel object, int id) {
          object.id = id;
        },
        objectToFB: (ItemsAfterModel object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final nameOffset = fbb.writeString(object.name);
          final aboutOffset = fbb.writeString(object.about);
          final originalPriceOffset = fbb.writeString(object.originalPrice);
          final discountPriceOffset = fbb.writeString(object.discountPrice);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, aboutOffset);
          fbb.addOffset(4, originalPriceOffset);
          fbb.addOffset(5, discountPriceOffset);
          fbb.addOffset(6, imageOffset);
          fbb.addInt64(7, object.numberOfItem);
          fbb.addInt64(8, object.itemId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final itemIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final aboutParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final originalPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final discountPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final numberOfItemParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = ItemsAfterModel(
              id: idParam,
              itemId: itemIdParam,
              category: categoryParam,
              name: nameParam,
              about: aboutParam,
              originalPrice: originalPriceParam,
              discountPrice: discountPriceParam,
              image: imageParam,
              numberOfItem: numberOfItemParam);

          return object;
        }),
    ItemsBeforeModel: EntityDefinition<ItemsBeforeModel>(
        model: _entities[4],
        toOneRelations: (ItemsBeforeModel object) => [],
        toManyRelations: (ItemsBeforeModel object) => {},
        getId: (ItemsBeforeModel object) => object.id,
        setId: (ItemsBeforeModel object, int id) {
          object.id = id;
        },
        objectToFB: (ItemsBeforeModel object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final nameOffset = fbb.writeString(object.name);
          final aboutOffset = fbb.writeString(object.about);
          final originalPriceOffset = fbb.writeString(object.originalPrice);
          final discountPriceOffset = fbb.writeString(object.discountPrice);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, aboutOffset);
          fbb.addOffset(4, originalPriceOffset);
          fbb.addOffset(5, discountPriceOffset);
          fbb.addOffset(6, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final aboutParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final originalPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final discountPriceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = ItemsBeforeModel(
              id: idParam,
              category: categoryParam,
              name: nameParam,
              about: aboutParam,
              originalPrice: originalPriceParam,
              discountPrice: discountPriceParam,
              image: imageParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserDetails] entity fields to define ObjectBox queries.
class UserDetails_ {
  /// see [UserDetails.id]
  static final id =
      QueryIntegerProperty<UserDetails>(_entities[0].properties[0]);

  /// see [UserDetails.userName]
  static final userName =
      QueryStringProperty<UserDetails>(_entities[0].properties[1]);

  /// see [UserDetails.userSurName]
  static final userSurName =
      QueryStringProperty<UserDetails>(_entities[0].properties[2]);
}

/// [MainModel] entity fields to define ObjectBox queries.
class MainModel_ {
  /// see [MainModel.id]
  static final id = QueryIntegerProperty<MainModel>(_entities[1].properties[0]);

  /// see [MainModel.mainId]
  static final mainId =
      QueryStringProperty<MainModel>(_entities[1].properties[1]);

  /// see [MainModel.token]
  static final token =
      QueryStringProperty<MainModel>(_entities[1].properties[2]);

  /// see [MainModel.userName]
  static final userName =
      QueryStringProperty<MainModel>(_entities[1].properties[3]);

  /// see [MainModel.userEmail]
  static final userEmail =
      QueryStringProperty<MainModel>(_entities[1].properties[4]);
}

/// [CartModel] entity fields to define ObjectBox queries.
class CartModel_ {
  /// see [CartModel.id]
  static final id = QueryIntegerProperty<CartModel>(_entities[2].properties[0]);

  /// see [CartModel.totalAmount]
  static final totalAmount =
      QueryDoubleProperty<CartModel>(_entities[2].properties[1]);
}

/// [ItemsAfterModel] entity fields to define ObjectBox queries.
class ItemsAfterModel_ {
  /// see [ItemsAfterModel.id]
  static final id =
      QueryIntegerProperty<ItemsAfterModel>(_entities[3].properties[0]);

  /// see [ItemsAfterModel.category]
  static final category =
      QueryStringProperty<ItemsAfterModel>(_entities[3].properties[1]);

  /// see [ItemsAfterModel.name]
  static final name =
      QueryStringProperty<ItemsAfterModel>(_entities[3].properties[2]);

  /// see [ItemsAfterModel.about]
  static final about =
      QueryStringProperty<ItemsAfterModel>(_entities[3].properties[3]);

  /// see [ItemsAfterModel.originalPrice]
  static final originalPrice =
      QueryStringProperty<ItemsAfterModel>(_entities[3].properties[4]);

  /// see [ItemsAfterModel.discountPrice]
  static final discountPrice =
      QueryStringProperty<ItemsAfterModel>(_entities[3].properties[5]);

  /// see [ItemsAfterModel.image]
  static final image =
      QueryStringProperty<ItemsAfterModel>(_entities[3].properties[6]);

  /// see [ItemsAfterModel.numberOfItem]
  static final numberOfItem =
      QueryIntegerProperty<ItemsAfterModel>(_entities[3].properties[7]);

  /// see [ItemsAfterModel.itemId]
  static final itemId =
      QueryIntegerProperty<ItemsAfterModel>(_entities[3].properties[8]);
}

/// [ItemsBeforeModel] entity fields to define ObjectBox queries.
class ItemsBeforeModel_ {
  /// see [ItemsBeforeModel.id]
  static final id =
      QueryIntegerProperty<ItemsBeforeModel>(_entities[4].properties[0]);

  /// see [ItemsBeforeModel.category]
  static final category =
      QueryStringProperty<ItemsBeforeModel>(_entities[4].properties[1]);

  /// see [ItemsBeforeModel.name]
  static final name =
      QueryStringProperty<ItemsBeforeModel>(_entities[4].properties[2]);

  /// see [ItemsBeforeModel.about]
  static final about =
      QueryStringProperty<ItemsBeforeModel>(_entities[4].properties[3]);

  /// see [ItemsBeforeModel.originalPrice]
  static final originalPrice =
      QueryStringProperty<ItemsBeforeModel>(_entities[4].properties[4]);

  /// see [ItemsBeforeModel.discountPrice]
  static final discountPrice =
      QueryStringProperty<ItemsBeforeModel>(_entities[4].properties[5]);

  /// see [ItemsBeforeModel.image]
  static final image =
      QueryStringProperty<ItemsBeforeModel>(_entities[4].properties[6]);
}
